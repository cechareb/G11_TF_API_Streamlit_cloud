# Este archivo par GCP ayuda en el despliegue usando Google Cloud Build
options:
  logging: CLOUD_LOGGING_ONLY

steps:
# Paso 0: Construir la imagen Docker desde el Dockerfile
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/streamlit_g11', '.']
# Paso 1: Chequear si el artefacto Repositorio existe o no
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      if ! gcloud artifacts repositories describe $_REPOSITORY_NAME --location=$_REGION --format='value(name)'; then
        echo "Repository $_REPOSITORY_NAME does not exist. Creating repository..."
        gcloud artifacts repositories create $_REPOSITORY_NAME --repository-format=docker --location=$_REGION
        echo "Repository $_REPOSITORY_NAME created."
      else
        echo "Repository $_REPOSITORY_NAME already exists."
      fi
# Paso 2: Pushear la imagen a Google Artifact Registry
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'gcr.io/$PROJECT_ID/streamlit_g11']
# Paso 3: Deployar la imagen en Google Cloud Run
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'gcloud'
  args: ['run', 'deploy', 'streamlit_g11', '--image', 'gcr.io/$PROJECT_ID/streamlit_g11', '--platform', 'managed', '--region', 'us-east4', '--allow-unauthenticated']
images:
- 'gcr.io/$PROJECT_ID/streamlit_g11'
 # Step 4: Agregar delay antes de chequeo de status
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      echo "Adding delay before checking service status..."
      sleep 30  # Delay for 60 seconds before starting status check

 # Step 5: Chequear status y uso de la URL desplegada en Cloud Run service
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      set -e  
      while [ "$(gcloud run services describe mle-template-service --region=us-east4 --platform=managed --format='value(status.conditions[0].status)')" != "True" ]; do 
        echo "Waiting for service to become stable..."
        sleep 10
      done 
      echo "Service is stable" 
      curl "$(gcloud run services describe mle-template-service --region=us-east4 --platform=managed --format='value(status.url)')/train_pipeline" 
      curl "$(gcloud run services describe mle-template-service --region=us-east4 --platform=managed --format='value(status.url)')/predict_pipeline"